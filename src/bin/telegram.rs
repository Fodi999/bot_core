// src/bin/telegram.rs

use bot_core::integration::telegram::bot::run_bot;

#[tokio::main]
async fn main() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    dotenv::dotenv().ok();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    env_logger::init();
    
    println!("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ Auraya...");
    println!("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    match std::env::var("TELOXIDE_TOKEN") {
        Ok(token) => {
            println!("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {}...{}", &token[..10], &token[token.len()-10..]);
        }
        Err(_) => {
            eprintln!("‚ùå TELOXIDE_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
            return;
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    println!("ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...");
    run_bot().await;
}
