use crate::{
    core::dialog::DialogContext,
    knowledge::{wikipedia::fetch_wikipedia_summary, github::search_github_repos},
    language::{detect::detect_language, translator::translate_text},
    storage::db::{get_from_cache, save_to_cache},
    skills::{
        code::{detect_code_query, fetch_code_examples},
        math::{is_math_expression, solve_with_explanation},
        weather::{is_weather_query, extract_city_from_query, get_weather, get_weather_fallback},
    },
};

/// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub async fn smart_answer_multilang(user_input: &str, dialog: &mut DialogContext) -> String {
    dialog.add_message("user", user_input);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let lang = detect_language(user_input).unwrap_or_else(|| "EN".to_string());

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    let input_en = if lang != "EN" {
        match translate_text(user_input, "EN").await {
            Ok(translated) => translated,
            Err(e) => {
                println!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {}", e);
                user_input.to_string()
            }
        }
    } else {
        user_input.to_string()
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if let Some(cached) = get_from_cache(&input_en).await {
        let translated = translate_if_needed(&cached, &lang).await;
        dialog.add_message("bot", &translated);
        return translated;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
    let response_en = if input_en.to_lowercase().starts_with("what is") || 
                         input_en.to_lowercase().contains("—á—Ç–æ —Ç–∞–∫–æ–µ") {
        
        println!("üìñ –ó–∞–ø—Ä–æ—Å Wikipedia: {}", input_en);
        match fetch_wikipedia_summary(&input_en).await {
            Ok(summary) if !summary.is_empty() && summary != "No summary found." => {
                println!("‚úÖ Wikipedia –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω");
                summary
            }
            Ok(_) => {
                println!("‚ö†Ô∏è Wikipedia: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                generate_fallback_response(&input_en)
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ Wikipedia: {}", e);
                generate_fallback_response(&input_en)
            }
        }
    } 
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª .await
    else if is_math_expression(&input_en) {
        println!("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {}", input_en);
        match solve_with_explanation(&input_en) {
            Ok(result) => result,
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {}", e);
                format!("‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å: **{}**\n\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: +, -, *, /, ^, sqrt(), sin(), cos() –∏ —Ç.–¥.", input_en)
            }
        }
    }
    // –ü–æ–≥–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –ù–û–í–´–ô –ù–ê–í–´–ö  
    else if is_weather_query(&input_en) {
        if let Some(city) = extract_city_from_query(&input_en) {
            println!("üå§Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {}", city);
            match get_weather(&city).await {
                Ok(weather_info) => weather_info,
                Err(e) => {
                    println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {}", e);
                    if e.contains("API –∫–ª—é—á") {
                        get_weather_fallback(&city)
                    } else {
                        e
                    }
                }
            }
        } else {
            "üå§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã!\n\n–ü—Ä–∏–º–µ—Ä: \"–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\" –∏–ª–∏ \"Weather in London\" üèôÔ∏è".to_string()
        }
    }
    // –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ - –£–õ–£–ß–®–ï–ù–ù–´–ô –ù–ê–í–´–ö
    else if let Some(language) = detect_code_query(&input_en) {
        println!("üíª –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞: {}", language);
        match fetch_code_examples(&language).await {
            Ok(examples) => examples,
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞: {}", e);
                format!("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è **{}** —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üíª", language)
            }
        }
    }
    // GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    else if input_en.to_lowercase().contains("rust example") || 
            input_en.to_lowercase().contains("github") ||
            input_en.to_lowercase().contains("code") {
        
        println!("üîç –ó–∞–ø—Ä–æ—Å GitHub: {}", input_en);
        match search_github_repos("rust example", 3).await {
            Ok(repos) if !repos.is_empty() => {
                println!("‚úÖ GitHub: –Ω–∞–π–¥–µ–Ω–æ {} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", repos.len());
                repos.into_iter()
                    .map(|(name, description, url)| {
                        format!("üìÇ **{}**\n{}\nüîó {}", name, description, url)
                    })
                    .collect::<Vec<_>>()
                    .join("\n\n")
            }
            Ok(_) => {
                println!("‚ö†Ô∏è GitHub: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üíª".to_string()
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ GitHub: {}", e);
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üîß".to_string()
            }
        }
    } 
    else {
        // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        generate_simple_response(&input_en)
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫—ç—à –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ
    save_to_cache(&input_en, &response_en).await;
    let final_response = translate_if_needed(&response_en, &lang).await;
    dialog.add_message("bot", &final_response);
    final_response
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –≤–Ω–µ—à–Ω–∏–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
fn generate_fallback_response(query: &str) -> String {
    if query.to_lowercase().contains("rust") {
        "ü¶Ä **Rust** - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –ø–∞–º—è—Ç–∏ –∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. \
        Rust –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤, –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!\n\n\
        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Wikipedia —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –æ—Å–Ω–æ–≤—ã —è –∑–Ω–∞—é! üòä".to_string()
    } else if query.to_lowercase().contains("artificial intelligence") || 
              query.to_lowercase().contains("ai") {
        "ü§ñ **–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò)** - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, \
        –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –∏ –æ–±—É—á–µ–Ω–∏–µ.\n\n\
        –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Wikipedia –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üîß".to_string()
    } else if query.to_lowercase().contains("programming") || query.to_lowercase().contains("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ") {
        "üíª **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ** - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. \
        –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞, –æ—Ç–ª–∞–¥–∫—É –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.\n\n\
        –•–æ—Ç—è —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Wikipedia —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å–Ω–æ–≤—ã —è –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å! üòä".to_string()
    } else {
        "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, \
        –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ - –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏–ª–∏ –Ω–∞—É–∫–µ. \
        –í–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ! üí°".to_string()
    }
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –ò–ò
fn generate_simple_response(input: &str) -> String {
    let input_lower = input.to_lowercase();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if input_lower.contains("hello") || input_lower.contains("–ø—Ä–∏–≤–µ—Ç") || input_lower.contains("hi") {
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?".to_string()
    } 
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    else if input_lower.contains("how are you") || input_lower.contains("–∫–∞–∫ –¥–µ–ª–∞") {
        "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä".to_string()
    }
    // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    else if input_lower.contains("thank") || input_lower.contains("—Å–ø–∞—Å–∏–±–æ") {
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? üòä".to_string()
    }
    // –ü—Ä–æ—â–∞–Ω–∏—è
    else if input_lower.contains("bye") || input_lower.contains("–ø–æ–∫–∞") || input_lower.contains("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è") {
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! –û–±—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è! üëã".to_string()
    }
    // –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ù–ê–í–´–ö–û–í
    else if input_lower.contains("what are you") || input_lower.contains("–∫—Ç–æ —Ç—ã") || input_lower.contains("—á—Ç–æ —Ç—ã") {
        "–Ø Auraya - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! ü§ñ –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –Ω–∞–π—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub, —Ä–µ—à–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?".to_string()
    }
    // –ü–æ–º–æ—â—å - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö
    else if input_lower.contains("help") || input_lower.contains("–ø–æ–º–æ—â—å") || input_lower.contains("—á—Ç–æ —É–º–µ–µ—à—å") {
        "–Ø —É–º–µ—é:\n‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia\n‚Ä¢ üíª –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ GitHub\n‚Ä¢ üßÆ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n‚Ä¢ üå§Ô∏è –£–∑–Ω–∞–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–∞—Ö\n‚Ä¢ üí° –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n‚Ä¢ üåç –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã\n‚Ä¢ üí¨ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö\n\n–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã /help!".to_string()
    }
    // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    else if input_lower.len() < 10 && !input_lower.chars().any(|c| c == '?' || c == '!') {
        let responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ü§î",
            "–ü–æ–Ω—è–ª! –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–•–º, —Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º!",
            "–ò–Ω—Ç—Ä–∏–≥—É—é—â–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π üòä"
        ];
        responses[input.len() % responses.len()].to_string()
    }
    // –í–æ–ø—Ä–æ—Å—ã
    else if input_lower.contains('?') || input_lower.contains("–∫–∞–∫") || input_lower.contains("—á—Ç–æ") || input_lower.contains("where") || input_lower.contains("how") || input_lower.contains("what") {
        "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! ü§î –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ:\n\n‚Ä¢ üìñ \"–ß—Ç–æ —Ç–∞–∫–æ–µ Rust?\" - –ø–æ–∏—Å–∫ –≤ Wikipedia\n‚Ä¢ üßÆ \"2 + 2 * 3\" - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n‚Ä¢ üå§Ô∏è \"–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\" - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n‚Ä¢ üíª \"–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Python\" - –ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n\n–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!".to_string()
    }
    // –≠–º–æ—Ü–∏–∏
    else if input_lower.contains("love") || input_lower.contains("–ª—é–±–ª—é") {
        "–ü—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å! üòä –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?".to_string()
    }
    else if input_lower.contains("hate") || input_lower.contains("–Ω–µ–Ω–∞–≤–∏–∂—É") {
        "–ü–æ–Ω–∏–º–∞—é, –±—ã–≤–∞—é—Ç —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –ú–æ–∂–µ—Ç, –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-—Ç–æ –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º? üåü".to_string()
    }
    // –û–±—â–∏–µ —Ç–µ–º—ã - –û–ë–ù–û–í–õ–ï–ù–´ –î–õ–Ø –ù–û–í–´–• –ù–ê–í–´–ö–û–í
    else if input_lower.contains("weather") || input_lower.contains("–ø–æ–≥–æ–¥–∞") {
        "üå§Ô∏è –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É? –°–∫–∞–∂–∏ –º–Ω–µ –≥–æ—Ä–æ–¥!\n\n–ü—Ä–∏–º–µ—Ä: \"–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\" –∏–ª–∏ \"Weather in London\" üèôÔ∏è".to_string()
    }
    else if input_lower.contains("time") || input_lower.contains("–≤—Ä–µ–º—è") {
        "–í—Ä–µ–º—è –ª—É—á—à–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ! ‚è∞ –ê —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Ä–µ–º—è –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!".to_string()
    }
    // –û–±—É—á–µ–Ω–∏–µ –∏ –∑–Ω–∞–Ω–∏—è
    else if input_lower.contains("learn") || input_lower.contains("—É—á–∏—Ç—å") || input_lower.contains("–∏–∑—É—á–∞—Ç—å") {
        "–û–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! üìö –ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å?\n\n‚Ä¢ üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n‚Ä¢ üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —Ä–µ—à—É –∑–∞–¥–∞—á–∏\n‚Ä¢ üåç –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - –Ω–∞–π–¥—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ!".to_string()
    }
    // –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    else if input.len() > 50 {
        format!("–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å –æ \"{}\". –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! ü§î –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n‚Ä¢ üìñ –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏\n‚Ä¢ üíª –ü—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞\n‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–æ–π", 
                &input[..input.len().min(40)])
    }
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    else {
        let responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ ü§î",
            "–ü–æ–Ω—è–ª —Ç–µ–±—è! –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–≥–æ–¥–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ üòä",
            "–•–º, –∏–Ω—Ç—Ä–∏–≥—É—é—â–∞—è —Ç–µ–º–∞! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å? üí°",
            "–≠—Ç–æ –ª—é–±–æ–ø—ã—Ç–Ω–æ! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ üöÄ"
        ];
        responses[input.len() % responses.len()].to_string()
    }
}

/// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async fn translate_if_needed(text: &str, target_lang: &str) -> String {
    if target_lang != "EN" {
        match translate_text(text, target_lang).await {
            Ok(translated) => translated,
            Err(e) => {
                println!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞: {} | –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback", e);
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫-–∑–∞–≥–ª—É—à–∫—É
                text.to_string()
            }
        }
    } else {
        text.to_string()
    }
}


