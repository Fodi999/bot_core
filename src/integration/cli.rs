use std::io::{self, Write};
use crate::core::dialog::handle_input;

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π REPL-—á–∞—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
pub fn run_cli() {
    println!("ü§ñ –ß–∞—Ç-–±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å (–≤–≤–µ–¥–∏—Ç–µ `exit` –¥–ª—è –≤—ã—Ö–æ–¥–∞):");

    loop {
        print!("> ");
        io::stdout().flush().unwrap();

        let mut input = String::new();
        if io::stdin().read_line(&mut input).is_err() {
            println!("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.");
            continue;
        }

        let input = input.trim();
        if input.eq_ignore_ascii_case("exit") {
            println!("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!");
            break;
        }

        match handle_input(input.to_string()) {
            Ok(reply) => println!("–ë–æ—Ç: {}", reply),
            Err(_) => println!("–ë–æ—Ç: [–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏]"),
        }
    }
}
