use teloxide::{prelude::*, types::Message, utils::command::BotCommands};
use crate::{
    integration::telegram::bot::Command,
    core::{dialog::DialogContext, logic::smart_answer_multilang},
};
use std::collections::HashMap;
use tokio::sync::Mutex;
use std::sync::OnceLock;

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
static CHAT_STATES: OnceLock<Mutex<HashMap<ChatId, DialogContext>>> = OnceLock::new();

fn get_chat_states() -> &'static Mutex<HashMap<ChatId, DialogContext>> {
    CHAT_STATES.get_or_init(|| Mutex::new(HashMap::new()))
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
pub async fn handle_command(bot: Bot, msg: Message, cmd: Command) -> ResponseResult<()> {
    let chat_id = msg.chat.id;

    match cmd {
        Command::Help => {
            let help_text = Command::descriptions().to_string();
            bot.send_message(chat_id, help_text).await?;
        }

        Command::Start => {
            let mut states = get_chat_states().lock().await;
            states.insert(chat_id, DialogContext::new());
            
            let welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Auraya - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n\
                –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n\
                ‚Ä¢ –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ Wikipedia\n\
                ‚Ä¢ –ü–æ–∏—Å–∫–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞ GitHub\n\
                ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞\n\
                ‚Ä¢ –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!\n\n\
                –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–∞–Ω–¥! üí¨\n\
                –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\
                /ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\
                /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É";
            
            bot.send_message(chat_id, welcome_text).await?;
        }

        Command::Ask(question) => {
            if question.trim().is_empty() {
                bot.send_message(chat_id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
                    .await?;
                return Ok(());
            }

            let mut states = get_chat_states().lock().await;
            let dialog = states.entry(chat_id).or_insert_with(DialogContext::new);
            
            let reply = smart_answer_multilang(&question, dialog).await;
            bot.send_message(chat_id, reply).await?;
        }
    }

    Ok(())
}

/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
pub async fn handle_message(bot: Bot, msg: Message) -> ResponseResult<()> {
    let chat_id = msg.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if let Some(text) = msg.text() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        bot.send_chat_action(chat_id, teloxide::types::ChatAction::Typing).await?;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        let mut states = get_chat_states().lock().await;
        let dialog = states.entry(chat_id).or_insert_with(DialogContext::new);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
        let reply = smart_answer_multilang(text, dialog).await;
        
        bot.send_message(chat_id, reply).await?;
    }

    Ok(())
}
