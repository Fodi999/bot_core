use reqwest::Client;
use serde::Deserialize;
use std::env;

#[derive(Debug, Deserialize)]
struct DeepLTranslation {
    translations: Vec<Translation>,
}

#[derive(Debug, Deserialize)]
struct Translation {
    text: String,
}

/// –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ (`EN`, `RU`, `FR`, –∏ —Ç.–¥.)
pub async fn translate_text(text: &str, target_lang: &str) -> Result<String, String> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    let api_key = match env::var("DEEPL_API_KEY") {
        Ok(key) if !key.is_empty() => key,
        _ => {
            println!("‚ö†Ô∏è DEEPL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
            return Err("DeepL API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω".to_string());
        }
    };

    let url = "https://api-free.deepl.com/v2/translate";

    let client = Client::builder()
        .timeout(std::time::Duration::from_secs(10)) // –¢–∞–π–º-–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
        .build()
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞: {}", e))?;

    let response = client
        .post(url)
        .header("User-Agent", "Bot-Auraya/1.0")
        .form(&[
            ("auth_key", api_key.as_str()),
            ("text", text),
            ("target_lang", target_lang),
        ])
        .send()
        .await
        .map_err(|e| format!("–ó–∞–ø—Ä–æ—Å DeepL –Ω–µ —É–¥–∞–ª—Å—è: {}", e))?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if !response.status().is_success() {
        let status = response.status();
        let error_text = response.text().await.unwrap_or_default();
        return Err(format!("DeepL API –æ—à–∏–±–∫–∞ {}: {}", status, error_text));
    }

    let response_text = response.text().await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ DeepL: {}", e))?;

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
    println!("üîç DeepL –æ—Ç–≤–µ—Ç: {}", &response_text[..response_text.len().min(200)]);

    let data: DeepLTranslation = serde_json::from_str(&response_text)
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON DeepL: {} | –û—Ç–≤–µ—Ç: {}", e, response_text))?;

    if data.translations.is_empty() {
        return Err("DeepL –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤".to_string());
    }

    Ok(data.translations[0].text.clone())
}

/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ DeepL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
pub fn simple_translate_fallback(text: &str, target_lang: &str) -> String {
    match target_lang {
        "RU" => {
            // –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            text.replace("Hello", "–ü—Ä–∏–≤–µ—Ç")
                .replace("Thank you", "–°–ø–∞—Å–∏–±–æ")
                .replace("Goodbye", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è")
                .replace("Error", "–û—à–∏–±–∫–∞")
        }
        "EN" => {
            text.replace("–ü—Ä–∏–≤–µ—Ç", "Hello")
                .replace("–°–ø–∞—Å–∏–±–æ", "Thank you")
                .replace("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "Goodbye")
                .replace("–û—à–∏–±–∫–∞", "Error")
        }
        _ => text.to_string() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    }
}