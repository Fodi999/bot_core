use crate::knowledge::github::search_github_repos;

/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –∫–æ–¥—É, –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
pub fn detect_code_query(input: &str) -> Option<String> {
    let input_lower = input.to_lowercase();
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    let keywords = [
        "example in", "–ø—Ä–∏–º–µ—Ä –Ω–∞", "–∫–æ–¥ –Ω–∞", "code in", "how to write",
        "show me", "–ø–æ–∫–∞–∂–∏", "–Ω–∞–π–¥–∏ –∫–æ–¥", "examples for", "tutorial",
        "learn", "–∏–∑—É—á–∏—Ç—å", "syntax", "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
    ];

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    let languages = [
        "rust", "python", "javascript", "java", "c++", "cpp", "c#", "csharp",
        "go", "kotlin", "swift", "php", "ruby", "typescript", "scala",
        "haskell", "clojure", "dart", "r", "matlab", "perl", "lua",
        "assembly", "bash", "powershell", "sql", "html", "css"
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    let has_keywords = keywords.iter().any(|kw| input_lower.contains(kw));
    
    if has_keywords {
        // –ò—â–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        let parts: Vec<&str> = input_lower.split_whitespace().collect();
        for (i, part) in parts.iter().enumerate() {
            if part == &"–Ω–∞" || part == &"in" || part == &"for" {
                if let Some(lang) = parts.get(i + 1) {
                    let normalized_lang = normalize_language_name(lang);
                    if languages.contains(&normalized_lang.as_str()) {
                        return Some(normalized_lang);
                    }
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —è–∑—ã–∫ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–≥–æ–≤, –∏—â–µ–º –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
        for word in parts {
            let normalized = normalize_language_name(word);
            if languages.contains(&normalized.as_str()) {
                return Some(normalized);
            }
        }
    }
    
    // –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —è–∑—ã–∫–∞ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for lang in &languages {
        if input_lower.contains(lang) {
            return Some(normalize_language_name(lang));
        }
    }

    None
}

/// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
fn normalize_language_name(lang: &str) -> String {
    match lang.to_lowercase().as_str() {
        "js" | "javascript" => "javascript".to_string(),
        "ts" | "typescript" => "typescript".to_string(),
        "py" | "python" => "python".to_string(),
        "cpp" | "c++" => "cpp".to_string(),
        "cs" | "c#" | "csharp" => "csharp".to_string(),
        "go" | "golang" => "go".to_string(),
        "rs" | "rust" => "rust".to_string(),
        _ => lang.to_lowercase()
    }
}

/// –ò—â–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ GitHub –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É
pub async fn fetch_code_examples(language: &str) -> Result<String, String> {
    let normalized_lang = normalize_language_name(language);
    let query = format!("{} example tutorial", normalized_lang);
    
    println!("üîç –ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞: {}", query);
    
    let results = search_github_repos(&query, 5).await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ GitHub: {}", e))?;
    
    if results.is_empty() {
        return Ok(format!("‚ùå –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è **{}** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å:\n‚Ä¢ Tutorials\n‚Ä¢ Documentation\n‚Ä¢ Stack Overflow", 
                         normalized_lang.to_uppercase()));
    }
    
    let mut formatted = format!("üöÄ **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ {}:**\n\n", normalized_lang.to_uppercase());
    
    for (i, (name, desc, url)) in results.iter().enumerate() {
        formatted.push_str(&format!(
            "{}. üìÇ **{}**\n   üí° {}\n   üîó {}\n\n",
            i + 1,
            name,
            if desc.is_empty() { "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è" } else { desc },
            url
        ));
    }
    
    formatted.push_str("üí° **–°–æ–≤–µ—Ç:** –ò–∑—É—á–∏—Ç–µ README —Ñ–∞–π–ª—ã –≤ —ç—Ç–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è!");
    
    Ok(formatted)
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤
pub fn generate_basic_example(language: &str) -> Option<String> {
    let normalized = normalize_language_name(language);
    
    match normalized.as_str() {
        "rust" => Some(format!(
            "ü¶Ä **–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Rust:**\n\n```rust\nfn main() {{\n    println!(\"Hello, World!\");\n    \n    let name = \"Rust\";\n    println!(\"–ü—Ä–∏–≤–µ—Ç –æ—Ç {{}}!\", name);\n}}\n```"
        )),
        "python" => Some(format!(
            "üêç **–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Python:**\n\n```python\n# Hello World\nprint(\"Hello, World!\")\n\n# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\nname = \"Python\"\nprint(f\"–ü—Ä–∏–≤–µ—Ç –æ—Ç {{name}}!\")\n```"
        )),
        "javascript" => Some(format!(
            "‚ö° **–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä JavaScript:**\n\n```javascript\n// Hello World\nconsole.log(\"Hello, World!\");\n\n// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\nconst name = \"JavaScript\";\nconsole.log(`–ü—Ä–∏–≤–µ—Ç –æ—Ç ${{name}}!`);\n```"
        )),
        "go" => Some(format!(
            "üîµ **–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Go:**\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {{\n    fmt.Println(\"Hello, World!\")\n    \n    name := \"Go\"\n    fmt.Printf(\"–ü—Ä–∏–≤–µ—Ç –æ—Ç %s!\\n\", name)\n}}\n```"
        )),
        _ => None
    }
}