use meval::eval_str;
use regex::Regex;

/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
pub fn is_math_expression(input: &str) -> bool {
    let input_clean = input.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    let math_keywords = ["+", "-", "*", "/", "=", "^", "sqrt", "mod", "sin", "cos", "tan", "log", "ln"];
    let has_operators = math_keywords.iter().any(|kw| input_clean.contains(kw));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª
    let has_numbers = input_clean.chars().any(|c| c.is_ascii_digit());
    
    // –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    let math_patterns = [
        r"\d+\s*[\+\-\*/\^]\s*\d+",  // 2 + 3, 5 * 8
        r"\d+\s*=\s*\?",             // x = ?
        r"sqrt\(\d+\)",              // sqrt(16)
        r"\d+\s*mod\s*\d+",          // 10 mod 3
    ];
    
    let has_math_pattern = math_patterns.iter().any(|pattern| {
        Regex::new(pattern).unwrap().is_match(input_clean)
    });
    
    has_operators && has_numbers || has_math_pattern
}

/// –í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
pub fn evaluate_expression(input: &str) -> Result<f64, String> {
    let cleaned = clean_math_expression(input);
    eval_str(&cleaned).map_err(|e| format!("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {}", e))
}

/// –û—á–∏—â–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
fn clean_math_expression(input: &str) -> String {
    let mut cleaned = input.trim().to_string();
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
    cleaned = cleaned.replace("–≤—ã—á–∏—Å–ª–∏", "");
    cleaned = cleaned.replace("–ø–æ—Å—á–∏—Ç–∞–π", "");
    cleaned = cleaned.replace("calculate", "");
    cleaned = cleaned.replace("—Ä–∞–≤–Ω–æ", "");
    cleaned = cleaned.replace("equals", "");
    cleaned = cleaned.replace("=", "");
    cleaned = cleaned.replace("?", "");
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    cleaned = cleaned.replace(" –ø–ª—é—Å ", "+");
    cleaned = cleaned.replace(" –º–∏–Ω—É—Å ", "-");
    cleaned = cleaned.replace(" —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ ", "*");
    cleaned = cleaned.replace(" —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ ", "/");
    cleaned = cleaned.replace(" –≤ —Å—Ç–µ–ø–µ–Ω–∏ ", "^");
    
    cleaned.trim().to_string()
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
pub fn format_math_result(expression: &str, result: f64) -> String {
    let cleaned_expr = clean_math_expression(expression);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if result.fract() == 0.0 && result.abs() < 1e15 {
        format!("üßÆ **{}** = **{}**", cleaned_expr, result as i64)
    } else {
        format!("üßÆ **{}** = **{:.6}**", cleaned_expr, result)
    }
}

/// –†–µ—à–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
pub fn solve_with_explanation(input: &str) -> Result<String, String> {
    let result = evaluate_expression(input)?;
    let explanation = generate_explanation(input, result);
    Ok(format!("{}\n\nüí° {}", format_math_result(input, result), explanation))
}

/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
fn generate_explanation(expression: &str, result: f64) -> String {
    let cleaned = clean_math_expression(expression);
    
    if cleaned.contains("+") {
        "–í—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª."
    } else if cleaned.contains("-") {
        "–í—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ —á–∏—Å–µ–ª."
    } else if cleaned.contains("*") {
        "–í—ã–ø–æ–ª–Ω–∏–ª–∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª."
    } else if cleaned.contains("/") {
        if result.fract() == 0.0 {
            "–í—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Ü–µ–ª–æ."
        } else {
            "–í—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–ª–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–æ–º."
        }
    } else if cleaned.contains("^") {
        "–í–æ–∑–≤–µ–ª–∏ —á–∏—Å–ª–æ –≤ —Å—Ç–µ–ø–µ–Ω—å."
    } else if cleaned.contains("sqrt") {
        "–ò–∑–≤–ª–µ–∫–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å."
    } else {
        "–í—ã–ø–æ–ª–Ω–∏–ª–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ."
    }.to_string()
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
pub fn get_math_constant(name: &str) -> Option<f64> {
    match name.to_lowercase().as_str() {
        "pi" | "–ø–∏" => Some(std::f64::consts::PI),
        "e" => Some(std::f64::consts::E),
        "tau" | "—Ç–∞—É" => Some(std::f64::consts::TAU),
        _ => None
    }
}

/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
pub fn convert_units(value: f64, from: &str, to: &str) -> Option<(f64, String)> {
    match (from.to_lowercase().as_str(), to.to_lowercase().as_str()) {
        // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        ("c", "f") | ("—Ü–µ–ª—å—Å–∏–π", "—Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç") => {
            Some((value * 9.0 / 5.0 + 32.0, format!("{:.1}¬∞C = {:.1}¬∞F", value, value * 9.0 / 5.0 + 32.0)))
        }
        ("f", "c") | ("—Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç", "—Ü–µ–ª—å—Å–∏–π") => {
            Some(((value - 32.0) * 5.0 / 9.0, format!("{:.1}¬∞F = {:.1}¬∞C", value, (value - 32.0) * 5.0 / 9.0)))
        }
        
        // –î–ª–∏–Ω–∞
        ("m", "ft") | ("–º–µ—Ç—Ä", "—Ñ—É—Ç") => {
            Some((value * 3.28084, format!("{:.2}m = {:.2}ft", value, value * 3.28084)))
        }
        ("ft", "m") | ("—Ñ—É—Ç", "–º–µ—Ç—Ä") => {
            Some((value / 3.28084, format!("{:.2}ft = {:.2}m", value, value / 3.28084)))
        }
        
        _ => None
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_math_expression() {
        assert!(is_math_expression("2 + 3"));
        assert!(is_math_expression("sqrt(16)"));
        assert!(is_math_expression("10 * 5"));
        assert!(!is_math_expression("Hello world"));
    }

    #[test]
    fn test_evaluate_expression() {
        assert_eq!(evaluate_expression("2 + 3").unwrap(), 5.0);
        assert_eq!(evaluate_expression("10 * 2").unwrap(), 20.0);
        assert_eq!(evaluate_expression("sqrt(16)").unwrap(), 4.0);
    }

    #[test]
    fn test_clean_expression() {
        assert_eq!(clean_math_expression("–≤—ã—á–∏—Å–ª–∏ 2 + 3"), "2 + 3");
        assert_eq!(clean_math_expression("5 –ø–ª—é—Å 3"), "5+3");
    }

    #[test]
    fn test_math_constants() {
        assert!(get_math_constant("pi").is_some());
        assert!(get_math_constant("e").is_some());
        assert!(get_math_constant("unknown").is_none());
    }
}
