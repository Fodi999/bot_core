use reqwest::Client;
use serde::Deserialize;
use std::env;

#[derive(Debug, Deserialize)]
struct WeatherResponse {
    weather: Vec<WeatherCondition>,
    main: WeatherMain,
    name: String,
    sys: Option<WeatherSys>,
    wind: Option<WeatherWind>,
}

#[derive(Debug, Deserialize)]
struct WeatherCondition {
    main: String,
    description: String,
    icon: String,
}

#[derive(Debug, Deserialize)]
struct WeatherMain {
    temp: f64,
    feels_like: f64,
    humidity: u8,
    pressure: u16,
    temp_min: f64,
    temp_max: f64,
}

#[derive(Debug, Deserialize)]
struct WeatherSys {
    country: String,
}

#[derive(Debug, Deserialize)]
struct WeatherWind {
    speed: f64,
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥–Ω—ã–º
pub fn is_weather_query(input: &str) -> bool {
    let input_lower = input.to_lowercase();
    let weather_keywords = [
        "–ø–æ–≥–æ–¥–∞", "weather", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "temperature", 
        "–¥–æ–∂–¥—å", "rain", "—Å–Ω–µ–≥", "snow", "—Å–æ–ª–Ω—Ü–µ", "sunny",
        "–æ–±–ª–∞—á–Ω–æ", "cloudy", "—Ç—É–º–∞–Ω", "fog", "–≤–µ—Ç–µ—Ä", "wind"
    ];
    
    weather_keywords.iter().any(|kw| input_lower.contains(kw))
}

/// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
pub fn extract_city_from_query(input: &str) -> Option<String> {
    let input_lower = input.to_lowercase();
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
    let patterns = [
        r"–ø–æ–≥–æ–¥–∞ –≤ (.+)",
        r"weather in (.+)", 
        r"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ (.+)",
        r"–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ (.+)",
        r"how is weather in (.+)"
    ];
    
    for pattern in &patterns {
        if let Ok(re) = regex::Regex::new(pattern) {
            if let Some(captures) = re.captures(&input_lower) {
                if let Some(city) = captures.get(1) {
                    return Some(city.as_str().trim().to_string());
                }
            }
        }
    }
    
    None
}

/// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
pub async fn get_weather(city: &str) -> Result<String, String> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    let api_key = match env::var("OPENWEATHER_API_KEY") {
        Ok(key) if !key.is_empty() => key,
        _ => {
            return Err("‚ö†Ô∏è OpenWeather API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENWEATHER_API_KEY –≤ .env —Ñ–∞–π–ª".to_string());
        }
    };
    
    let url = format!(
        "https://api.openweathermap.org/data/2.5/weather?q={}&appid={}&units=metric&lang=ru",
        urlencoding::encode(city), api_key
    );

    let client = Client::builder()
        .timeout(std::time::Duration::from_secs(10))
        .build()
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞: {}", e))?;

    let response = client
        .get(&url)
        .header("User-Agent", "Bot-Auraya/1.0")
        .send()
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {}", e))?;

    if !response.status().is_success() {
        return match response.status().as_u16() {
            404 => Err(format!("üèôÔ∏è –ì–æ—Ä–æ–¥ **{}** –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.", city)),
            401 => Err("üîë –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenWeather".to_string()),
            429 => Err("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã".to_string()),
            _ => Err(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {}", response.status()))
        };
    }

    let data: WeatherResponse = response
        .json()
        .await
        .map_err(|e| format!("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–≥–æ–¥—ã: {}", e))?;

    Ok(format_weather_response(&data))
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø–æ–≥–æ–¥–µ —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
fn format_weather_response(data: &WeatherResponse) -> String {
    let weather_condition = data.weather.first();
    let description = weather_condition
        .map(|w| w.description.as_str())
        .unwrap_or("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    
    let weather_emoji = get_weather_emoji(weather_condition);
    let temp_emoji = get_temperature_emoji(data.main.temp);
    
    let mut response = format!(
        "{} **–ü–æ–≥–æ–¥–∞ –≤ {}{}**\n\n",
        weather_emoji,
        data.name,
        data.sys.as_ref().map(|s| format!(", {}", s.country)).unwrap_or_default()
    );
    
    response.push_str(&format!(
        "üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {:.1}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {:.1}¬∞C) {}\n",
        data.main.temp, data.main.feels_like, temp_emoji
    ));
    
    response.push_str(&format!(
        "üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {}\n",
        capitalize_first_letter(description)
    ));
    
    response.push_str(&format!(
        "üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** {}%\n",
        data.main.humidity
    ));
    
    response.push_str(&format!(
        "üìè **–î–∞–≤–ª–µ–Ω–∏–µ:** {} –º–º —Ä—Ç.—Å—Ç.\n",
        (data.main.pressure as f64 * 0.75).round() as u16
    ));
    
    if let Some(wind) = &data.wind {
        response.push_str(&format!(
            "üí® **–í–µ—Ç–µ—Ä:** {:.1} –º/—Å\n",
            wind.speed
        ));
    }
    
    response.push_str(&format!(
        "üìà **–î–∏–∞–ø–∞–∑–æ–Ω:** {:.1}¬∞C ... {:.1}¬∞C",
        data.main.temp_min, data.main.temp_max
    ));
    
    response
}

/// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
fn get_weather_emoji(weather: Option<&WeatherCondition>) -> &'static str {
    match weather.map(|w| w.main.as_str()) {
        Some("Clear") => "‚òÄÔ∏è",
        Some("Clouds") => "‚òÅÔ∏è", 
        Some("Rain") => "üåßÔ∏è",
        Some("Drizzle") => "üå¶Ô∏è",
        Some("Thunderstorm") => "‚õàÔ∏è",
        Some("Snow") => "‚ùÑÔ∏è",
        Some("Mist") | Some("Fog") => "üå´Ô∏è",
        _ => "üå§Ô∏è"
    }
}

/// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
fn get_temperature_emoji(temp: f64) -> &'static str {
    match temp {
        t if t >= 30.0 => "üî•",
        t if t >= 25.0 => "üå°Ô∏è",
        t if t >= 15.0 => "üå§Ô∏è",
        t if t >= 5.0 => "‚ùÑÔ∏è",
        t if t >= -10.0 => "üßä",
        _ => "ü•∂"
    }
}

/// –î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
fn capitalize_first_letter(s: &str) -> String {
    let mut chars = s.chars();
    match chars.next() {
        None => String::new(),
        Some(first) => first.to_uppercase().collect::<String>() + chars.as_str(),
    }
}

/// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –±–µ–∑ API (fallback)
pub fn get_weather_fallback(city: &str) -> String {
    format!(
        "üå§Ô∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ {}**\n\n\
        –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n\
        üí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:**\n\
        ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ OPENWEATHER_API_KEY –≤ .env\n\
        ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ openweathermap.org\n\
        ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á\n\n\
        üì± **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:** –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞, AccuWeather, Weather.com",
        city
    )
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_is_weather_query() {
        assert!(is_weather_query("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"));
        assert!(is_weather_query("Weather in London"));
        assert!(is_weather_query("—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–µ–≥–æ–¥–Ω—è"));
        assert!(!is_weather_query("Hello world"));
    }

    #[test]
    fn test_extract_city() {
        assert_eq!(extract_city_from_query("–ø–æ–≥–æ–¥–∞ –≤ –º–æ—Å–∫–≤–µ"), Some("–º–æ—Å–∫–≤–µ".to_string()));
        assert_eq!(extract_city_from_query("weather in london"), Some("london".to_string()));
        assert_eq!(extract_city_from_query("hello"), None);
    }

    #[test]
    fn test_weather_emoji() {
        assert_eq!(get_temperature_emoji(35.0), "üî•");
        assert_eq!(get_temperature_emoji(20.0), "üå§Ô∏è");
        assert_eq!(get_temperature_emoji(-15.0), "ü•∂");
    }
}
